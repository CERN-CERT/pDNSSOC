## match tag=debug.** and dump to console
<match debug.**>
  @type stdout
  @id output_stdout
</match>

## SYSLOG INGESTION
# Getting DNS queries from syslog
<source>
  @type syslog
  port 5140
  protocol_type tcp
  tag syslog
</source>
# Parsing DNS queries from syslog
<match syslog>
  @type rewrite_tag_filter
  <rule>
   key message
   pattern /(?<date>.*) client \@.* (?<client>.*)#.*: query: (?<query>\S+) .*/
   tag pdnssocdata
  </rule>
</match>

## TCP INGESTION
# The data coming in BIND logs using syslog format
<source>
  @type tcp
  port 5141
  tag pdnssocdata
# For accepting data with TLS, enable the following
#  <transport tls>
#    ca_path /etc/pki/ca.pem
#    cert_path /etc/pki/cert.pem
#    private_key_path /etc/pki/key.pem
#  </transport>
  <parse>
        @type regexp
        expression /(?<date>.*) client \@.* (?<client>.*)#.*: query: (?<query>\S+) .*/
        # BIND9 variant:
        #expression /(?<date>.*) client (?<client>.*)#.*query: (?<query>\S+) .*/
  </parse>
#  delimiter "\n" # optional. "\n" (newline) by default
</source>

## dnstap pDNS data INGESTION
# dnstap must be configured to forward RESOLVER_RESPONSE, for example in BIND: "dnstap { resolver response; };"
# (?<date>.*) RR (?<client>.*):\w+ <- .* \w+ (?<query>[\.|\w]+)\/.*$
<source>
  @type tcp
  port 5142
  tag pdnssocdata
  <parse>
        @type regexp
        expression /(?<date>.*) RR (?<client>.*):\w+ <- .* \w+ (?<query>\w+\.\w+)\/.*/
  </parse>
</source>

## HTTP source to ingest JSON log entries
<source>
  @type http
  tag pdnssocdata
  port 5143
  bind 0.0.0.0
  body_size_limit 32m
  keepalive_timeout 10s
</source>

## OTHER PDNSSOC SERVERS
# Data coming from lower-level pDNSSOC servers
<source>
  @type forward
  port 5555
  tag pdnssocdata
  # tls true
  # tls_cert_path /path/to/fluentd.crt
  # tls_private_key_path /path/to/fluentd.key
  <parse>
        @type regexp
    expression /{"date":"(?<date>.*)","client":"(?<client>.*)","query":"(?<query>.*)"}/
  </parse>
</source>

## OpenSearch
# Getting logs from pdnssoc to send to OpenSearch
# <source>
#   @type tail
#   path /var/log/td-agent/alerts.log
#   tag pdnssoc_alerts
#   read_from_head true
#   <parse>
#     @type json
#   </parse>
# </source>

## DATA ROUTING
# Copying our pdnssocdata into multiple streams
## DATA ROUTING
# Copying our pdnssocdata into multiple streams
<match pdnssocdata>
        @type copy
        <store>
         @type relabel
         @label @pdnssocdata_allqueries
        </store>
        <store>
         @type relabel
         @label @pdnssocdata_correlate_query
        </store>
        <store>
         @type relabel
         @label @pdnssocdata_correlate_response
        </store>

        ## Send data to another pDNSSOC server
        #<store>
        # @type forward
        #   send_timeout 60s
        # recover_wait 10s
        # hard_timeout 60s
        # <server>
        #   host upstream-pdnssoc.domain.edu
        #   port 5555
        #   tls true
        #   tls_cert_path /path/to/fluentd.pem
        # </server>
        #</store>
        #######################

</match>

# Logging all queries (pdnssocdata_allqueries) to disc.
#Â This is used by the "looking back in the past" mechanism.
<label @pdnssocdata_allqueries>
<match pdnssocdata>
 @type file
  path /var/log/td-agent/queries
  compress gzip
  time_slice_format %Y%m%d-%H%M
  <format>
    @type json
  </format>
</match>
</label>


# Correlating the pdnssocdata_correlate data flow with malicious domains from MISP
# Then writing to disc
# Matching DNS queries with malicious domains
<label @pdnssocdata_correlate_query>
<filter pdnssocdata>
  @type filter_list
  filter AC
  key_to_filter query
  pattern_file_paths ["/etc/pdnssoc/misp_domains.txt"]
  filter_empty true
  action whitelist
</filter>
<match pdnssocdata>
  @type relabel
  @label @pdnssocdata_correlate
</match>
</label>

# Matching DNS replies with malicious IPs
<label @pdnssocdata_correlate_response>
<filter pdnssocdata>
  @type filter_list
  filter AC
  key_to_filter answer
  pattern_file_paths ["/etc/pdnssoc/misp_domains.txt", "/etc/pdnssoc/misp_ips.txt"]
  filter_empty true
  action whitelist
</filter>
<match pdnssocdata>
  @type relabel
  @label @pdnssocdata_correlate
</match>
</label>

<label @pdnssocdata_correlate>
<match pdnssocdata>
 @type file
  path /var/log/td-agent/pdnssoc-alerts/pdnssoc-buffer
  time_slice_format %Y%m%d-%H%M
  <format>
    @type json
  </format>
  <buffer>
    timekey 2m
    timekey_use_utc true
    timekey_wait 1m
  </buffer>
</match>
</label>

# Forward logs to OpenSearch
# <match pdnssoc_alerts>
#   @type opensearch
#   hosts https://opensearch.domain.org
#   logstash_format true
#   logstash_prefix pdnssoc
#   user %{USER}
#   password %{PASSWORD}
# </match>
